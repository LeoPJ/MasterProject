import os

import cv2
import numpy as np


# ori_height = 479  # 宽
# ori_width = 799  # 长
# ori_ratio = ori_width / ori_height
# print(ori_ratio)
#
# # img = cv2.imread("./human/23_2523_contours.jpg")
# img = cv2.imread("./new_yolo/dbor8_480_o_contours.jpg")
# cv2.imshow("img", img)
# fix_height = img.shape[0]
# fix_width = img.shape[1]
# print(fix_height, fix_width)
# cv2.waitKey(0)
#
# should_fix = 1
# # 0:宽边 1:长边 2:both
# if should_fix == 0:
#     aim_height = fix_width / ori_ratio  # 应有的宽边长度
#     print(aim_height)
#     fixed = cv2.copyMakeBorder(img, int(aim_height-fix_height), 0, 0, 0, cv2.BORDER_CONSTANT, value=(255, 255, 255))
#     cv2.imshow("img2", fixed)
#     cv2.waitKey(0)
#
#     # 画轮廓
#     contours = np.array([[[0, 0]], [[0, int(aim_height-fix_height)]], [[fix_width, int(aim_height-fix_height)]], [[fix_width, 0]]])
#     cv2.drawContours(fixed, [contours], -1, (0, 0, 255), 5, cv2.FILLED)
#     cv2.imshow('img2', fixed)
#     cv2.waitKey(0)
# elif should_fix == 1:
#     aim_width = fix_height * ori_ratio  # 应有的宽边长度
#     print(aim_width)
#     fixed = cv2.copyMakeBorder(img, 0, 0, 0, int(aim_width-fix_width), cv2.BORDER_CONSTANT, value=(255, 255, 255))
#     cv2.imshow("img2", fixed)
#     cv2.waitKey(0)
#
#     # 画轮廓
#     contours = np.array([[[fix_width, 0]], [[int(aim_width), 0]], [[int(aim_width), fix_height]], [[fix_width, fix_height]]])
#     cv2.drawContours(fixed, [contours], -1, (0, 0, 255), 10)
#     cv2.imshow('img2', fixed)
#     cv2.waitKey(0)
#     cv2.imwrite("new_yolo/dbor8_480_o_contours_fixed.jpg", fixed)


def get_comple_size(img, ori_height, ori_width, should_fix):
    # ori_height = 619  # 宽
    # ori_width = 915  # 长
    ori_ratio = ori_width / ori_height
    # print(ori_ratio)

    fix_height = img.shape[0]
    fix_width = img.shape[1]
    # print(fix_height, fix_width)

    # should_fix = 1
    # 0:宽边 1:长边 2:both
    if should_fix == 0:
        aim_height = fix_width / ori_ratio  # 应有的宽边长度
        # print(aim_height)
        aim_width = fix_width
    else:
        aim_width = fix_height * ori_ratio  # 应有的长边长度
        # print(aim_width)
        aim_height = fix_height

    return int(aim_width), int(aim_height)


# if __name__ == "__main__":
#     # 得到最高置信度的PPT区域
#     # res = ['', 0]
#     # for i in os.listdir("./exp7/labels/"):
#     #     with open(f"./exp7/labels/{i}", 'r') as f:
#     #         s = f.read()
#     #         # print(s)
#     #         # print(s.split(" ")[5])
#     #         score = float(s.split(" ")[5])
#     #         if res[1] < score:
#     #             res[0] = i
#     #             res[1] = score
#     #
#     # print(res)
#
#     img = cv2.imread("./exp7/crops/tv/23_2527.jpg")
#     cv2.imshow("img", img)
#     cv2.waitKey(0)
#     aim_width, aim_height = get_comple_size(img, ori_height=743, ori_width=1061, should_fix=1)
#     print(aim_width, aim_height)


# num = []
# for i in os.listdir("E:/MasterProject/毕业论文/论文2.0/视频截图/投影完整/MB_4_yolo/crops/tv"):
#     print(i)
#     no = int(i.split("_")[2].split(".")[0])
#     num.append(no)
#     img = cv2.imread(f"E:/MasterProject/毕业论文/论文2.0/视频截图/投影完整/MB_4_yolo/crops/tv/{i}")
#
# num = sorted(num)
# print(num)
#
# for j in num:
#     img = cv2.imread(f"E:/MasterProject/毕业论文/论文2.0/视频截图/投影完整/MB_4_yolo/crops/tv/MB_4_{j}.jpg")
#     print(f"E:/MasterProject/毕业论文/论文2.0/视频截图/投影完整/MB_4_yolo/crops/tv/MB_4_{j}.jpg")
#     print(img.shape[0])


num = [9, 10, 14, 15, 16, 17, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 202, 203, 204, 205, 206, 207, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]
score = [0.39743211146674795, 0.3986587302348021, 0.7846247856964683, 0.7887743026204564, 0.7857795270470971, 0.7846247856964683, 0.4077433600562059, 0.4077433600562059, 0.4059230771988121, 0.4059230771988121, 0.40468553009584907, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.40650026341466455, 0.4077433600562059, 0.4059230771988121, 0.40650026341466455, 0.40650026341466455, 0.4059230771988121, 0.40716821639898565, 0.40716821639898565, 0.4089940828402367, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.40716821639898565, 0.4077433600562059, 0.4059230771988121, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.40716821639898565, 0.40716821639898565, 0.4077433600562059, 0.4059230771988121, 0.40650026341466455, 0.40650026341466455, 0.4077433600562059, 0.4077433600562059, 0.4077433600562059, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4059230771988121, 0.4077433600562059, 0.4077433600562059, 0.9950448841309534, 0.9950448841309534, 0.9950448841309534, 0.9950448841309534, 0.9112161559315054, 0.8506667439703154, 0.8348909839517148, 0.880413564358146, 0.9747299024163569, 0.9950220724907063, 0.7139078776041666, 0.7094874811928552, 0.7116908156300242, 0.7139078776041666, 0.7116908156300242, 0.7139078776041666, 0.7091348841964682, 0.7094874811928552, 0.7139078776041666, 0.7116908156300242, 0.7116908156300242, 0.7116908156300242, 0.7116908156300242, 0.7116908156300242, 0.7116908156300242, 0.7139078776041666, 0.7139078776041666, 0.7139078776041666, 0.7139078776041666, 0.7116908156300242, 0.7120535714285714, 0.6597888563351757, 0.6259445280474908, 0.6555815197172619, 0.6515791571827219, 0.7081468033297887, 0.7095129955205071, 0.7083909718356692, 0.7076446565663803, 0.7101992652529762, 0.7116908156300242, 0.7045503186421747, 0.707018899917515, 0.7083923135543364, 0.7071823846726191, 0.6558475064343858, 0.6603856773603312, 0.6543491350091212, 0.6449283399560203, 0.6096759650605804, 0.955909535718169, 0.9239725054676626, 0.9147810052813695, 0.8889474818267388, 0.8745953582009311, 0.9288716928039532, 0.9508577865064695, 0.9613678320064613, 0.9722012513869348, 0.995055121358667, 0.6516612629469719, 0.6516612629469719, 0.6516612629469719, 0.6516612629469719, 0.6516612629469719, 0.6516612629469719, 0.6516612629469719, 0.6516612629469719, 0.6516612629469719, 0.6516612629469719, 0.23076703246456334, 0.23147926271698185, 0.6554944419031453, 0.639273566569485, 0.6491651143309065, 0.6428702320787889, 0.6560455670250818, 0.6500084530853761, 0.6532713440405749, 0.6520084409316234, 0.6520084409316234, 0.6500084530853761, 0.6520084409316234, 0.5290369852777049, 0.9893547443245383, 0.995068916012688, 0.9853593965743499, 0.995068916012688, 0.9950818746470921, 0.9950785731256152, 0.9958851674641148, 0.9950851641848248, 0.9950818746470921, 0.9950785731256152, 0.9718961163060542, 0.9356976996900129, 0.9369087164305835, 0.9379763423802462, 0.9334054459443868, 0.9293094496365525, 0.9353785220442622, 0.9658382242416941, 0.9950818746470921, 0.9851974429886204, 0.9754243402968664, 0.9950785731256152, 0.9950719338685319, 0.9950589389841726, 0.9804171151622842, 0.6480206972321844, 0.6496701535444996, 0.6517666948436179, 0.6500084530853761, 0.6517779656241195, 0.6500084530853761, 0.6540582291825433, 0.6531736732568352, 0.6539051329646323, 0.6517103409411101, 0.6500084530853761, 0.6500084530853761, 0.6507847267402577, 0.6496617522390039, 0.6578403141421746, 0.5839314189083681, 0.5801839859399471, 0.8876582642725599, 0.8626942254174397, 0.8669567188644369, 0.885737306740156, 0.8756963808402177, 0.8940733843075108, 0.896172888061169, 0.8926718173431735, 0.8779955110497237, 0.8738144567219153, 0.8716937154696133, 0.8608941774491682, 0.8465746303142329, 0.9145260018081204, 0.9958000045838967, 0.9868814604295111, 0.9806303197607545, 0.9678160985522555, 0.9325619891712936, 0.9520785018552875, 0.941573454797048, 0.9492384908272758, 0.9508002011339795, 0.9518925667123264, 0.9385424929015646, 0.9311365543561978, 0.9228036231508514, 0.9145342621650515, 0.8903129008612791, 0.8897001557632399, 0.9180421090308688, 0.938039567311561, 0.928628189403493, 0.9131921805474532, 0.9314835101476014, 0.952555436769321]

kv = {}
for i in range(0, len(num)):
    kv[num[i]] = score[i]

print(kv)

res = []
for i in range(0, 314):
    if i in num:
        res.append(kv[i])
        print(i+1, kv[i])
    else:
        res.append("null")

print(res)